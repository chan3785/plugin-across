{"version":3,"sources":["../src/actions/deposit.ts","../src/viem.ts","../src/environments.ts","../src/constants.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger, generateObjectDeprecated } from \"@elizaos/core\"; // Eliza OS의 로깅 유틸리티 가져오기\nimport {\n    ActionExample,\n    Content,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n    ModelClass,\n    type Action,\n} from \"@elizaos/core\"; // Eliza OS의 핵심 타입과 인터페이스 가져오기\nimport { composeContext } from \"@elizaos/core\"; // 컨텍스트 생성 유틸리티 가져오기\nimport { createUserWalletClient } from \"../viem\"; // Viem을 사용해 지갑 클라이언트 생성\nimport { createAcrossClient } from \"@across-protocol/app-sdk\"; // Across 프로토콜 클라이언트 생성\nimport { Address, parseUnits } from \"viem\"; // Viem에서 주소와 단위 변환 유틸리티 가져오기\nimport {\n    adjustInputAmountForOuput,\n    createTransactionUrl,\n} from \"src/environments\"; // 환경 설정에서 금액 조정 및 트랜잭션 URL 생성 함수 가져오기\nimport { supportedChains } from \"src/constants\"; // 지원되는 체인 목록 가져오기\nimport { stat } from \"node:fs\";\n\n// 입금 내용의 인터페이스 정의, Content를 확장\nexport interface DepositContent extends Content {\n    recipient: string;\n    amount: string | number; // 전송 금액\n    sourceChain: string; // 출발 체인 이름\n    destinationChain: string; // 도착 체인 이름\n    tokenName: string; // 토큰 이름\n}\n\nfunction isValidAddress(value: any): value is Address {\n    return typeof value === \"string\" && /^0x[0-9a-fA-F]+$/.test(value);\n}\n\n// 타입 가드: 주어진 내용이 DepositContent인지 확인\nfunction isDepositContent(content: any): content is DepositContent {\n    console.log(\"Content for Bridge\", content); // 디버깅용 콘솔 로그\n    return (\n        isValidAddress(content.recipient) && // 수신자 주소가 문자열인지 확인\n        (typeof content.amount === \"string\" || typeof content.amount === \"number\") && // 금액이 문자열 또는 bigint인지 확인\n        typeof content.sourceChain === \"string\" && // 출발 체인 이름이 문자열인지 확인\n        typeof content.destinationChain === \"string\" && // 도착 체인 이름이 문자열인지 확인\n        typeof content.tokenName === \"string\" // 토큰 이름이 문자열인지 확인\n    );\n}\n\n// 템플릿에서 추출한 변수 이름과 interface와 변수 이름이 차이가 나면 매칭을 시켜주지 않는다..!!!!!!!!\n\n// 메시지에서 입금 정보를 추출하기 위한 템플릿\nconst depositTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"0x2badda48c062e861ef17a96a806c451fd296a49f45b272dee17f85b0e32663fd\",\n    \"amount\": \"1000\",\n    \"sourceChain\": \"arbitrum\",\n    \"destinationChain\": \"base\",\n    \"tokenName\": \"USDC\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Recipient wallet address\n- Amount to transfer\n- source chain id\n- destination chain id\n- token name or token address\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\n// 액션 정의\nexport default {\n    name: \"BRIDGE_DEPOSIT\", // 액션 이름\n    similes: [\"DEPOSIT\", \"BRIDGE_TOKEN\", \"SEND\", \"bridge\", \"Bridge\", \"BRIDGE\"], // 이 액션을 트리거할 수 있는 유사 표현\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        console.log(\"Validating bridging from user:\", message.userId); // 사용자 ID로 브리징 유효성 검사 로그\n        return true; // 항상 유효로 간주\n    },\n    description: \"Transfer tokens from the agent's wallet to another address\", // 액션 설명\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        console.log(\"Starting BRIDGE_DEPOSIT handler...\"); // 핸들러 시작 로그\n        if (!state) {\n            state = (await runtime.composeState(message)) as State; // 상태가 없으면 메시지로 상태 구성\n        } \n\n        // 입금 컨텍스트 생성\n        const depositContext = composeContext({\n            state,\n            template: depositTemplate,\n        });\n\n        // AI 모델을 사용해 입금 내용 생성\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: depositContext,\n            modelClass: ModelClass.SMALL, // 작은 모델 사용\n        });\n        console.log(\"content generate\", content)\n        // 생성된 내용이 유효한지 확인\n        if (!isDepositContent(content)) {\n            console.error(\"Invalid content for BRIDGE_DEPOSIT action.\"); // 유효하지 않은 내용 로그\n            if (callback) {\n                callback({\n                    text: \"Unable to process bridge request. Invalid content provided.\", // 오류 메시지\n                    content: { error: \"Invalid transfer content\" },\n                });\n            }\n            return false; // 실패 반환\n        }\n\n        try {\n            // 내용에서 정보 추출\n            const sourceChainName = content.sourceChain;\n            const destinationChainName = content.destinationChain;\n            const WETH_DECIMALS = 18; // USDC의 소수점 자리수\n            const inputAmount = parseUnits(\n                content.amount.toString(),\n                WETH_DECIMALS\n            ); // 금액을 단위로 변환\n\n            // 런타임 설정에서 개인 키 가져오기\n            const privateKey = runtime.getSetting(\"ACROSS_PRIVATE_KEY\");\n            console.log(\"privateKey: \",privateKey)\n            \n            // 지원 체인 목록에서 출발 및 도착 체인 찾기\n            const sourceChainConfig = supportedChains.find(\n                (chain) => chain.chainName === sourceChainName\n            );\n            const destinationChainConfig = supportedChains.find(\n                (chain) => chain.chainName === destinationChainName\n            );\n\n            \n            // 지갑 클라이언트 생성\n            const wallet = createUserWalletClient(\n                privateKey,\n                sourceChainConfig.viemChain\n            );\n            \n            // Across 클라이언트 생성\n            const acrossClient = createAcrossClient({\n                integratorId: \"0xdead\",\n                chains: [\n                    sourceChainConfig.viemChain,\n                    destinationChainConfig.viemChain,\n                ],\n                useTestnet: true\n            });\n\n            // 토큰 전송 경로 정의\n            const route = {\n                originChainId: sourceChainConfig.chainId,\n                destinationChainId: destinationChainConfig.chainId,\n                inputToken: sourceChainConfig.tokenAddress.weth as Address,\n                outputToken: destinationChainConfig.tokenAddress.weth as Address,\n                isNative: true\n            };\n\n            console.log(\"Route\", route); // 경로 로그\n            \n            // 전송 견적 가져오기\n            const quote = await acrossClient.getQuote({\n                route,\n                inputAmount: inputAmount,\n            });\n\n\n            // 수수료를 고려해 입력 금액 조정\n            const adjustedInputAmount = adjustInputAmountForOuput(\n                inputAmount,\n                quote.fees.totalRelayFee.pct\n            );\n            \n            // 입금 매개변수 준비\n            const depositParams = {\n                ...quote.deposit,\n                recipient: content.recipient as  Address,\n                inputAmount: adjustedInputAmount,\n                outputAmount: inputAmount,\n            };\n\n            console.log(\"depositParams:\", depositParams)\n            \n            let sourceTxHash: string | undefined;\n            let destinationTxHash: string | undefined;\n            \n            // 견적 실행 (전송 수행)\n            await acrossClient.executeQuote({\n                walletClient: wallet,\n                deposit: depositParams,\n                onProgress: (progress) => {\n                    if (\n                        progress.step === \"approve\" &&\n                        progress.status === \"txSuccess\"\n                    ) {\n                        const { txReceipt } = progress;\n                        console.log(\n                            `Approved ${sourceChainConfig.tokenAddress.weth} on ${sourceChainConfig.viemChain.name}`\n                        ); // 승인 로그\n                        console.log(\n                            createTransactionUrl(\n                                sourceChainConfig.viemChain,\n                                txReceipt.transactionHash\n                            )\n                        ); // 트랜잭션 URL 로그\n                    }\n                    if (\n                        progress.step === \"deposit\" &&\n                        progress.status === \"txSuccess\"\n                    ) {\n                        const { depositId, txReceipt } = progress;\n                        console.log(\n                            `Deposited ${sourceChainConfig.tokenAddress.weth} on ${sourceChainConfig.viemChain.name}`\n                        ); // 입금 로그\n                        elizaLogger.log(\n                            createTransactionUrl(\n                                sourceChainConfig.viemChain,\n                                txReceipt.transactionHash\n                            )\n                        ); // 트랜잭션 URL 로그\n                        sourceTxHash = createTransactionUrl(sourceChainConfig.viemChain, txReceipt.transactionHash)\n                    }\n                    if (\n                        progress.step === \"fill\" &&\n                        progress.status === \"txSuccess\"\n                    ) {\n                        const { txReceipt, actionSuccess } = progress;\n                        console.log(\n                            `Filled on ${destinationChainConfig.viemChain.name}`\n                        ); // 채우기 로그\n                        console.log(\n                            createTransactionUrl(\n                                destinationChainConfig.viemChain,\n                                txReceipt.transactionHash\n                            )\n                        ); // 트랜잭션 URL 로그\n                        destinationTxHash = createTransactionUrl(\n                            destinationChainConfig.viemChain,\n                            txReceipt.transactionHash\n                        )\n                        console.log(\"actionSuccess: \",actionSuccess)\n                        if (actionSuccess) {\n                            console.log(`Cross chain messages were successful`); // 성공 로그\n                        } else {\n                            console.log(`Cross chain messages failed`); // 실패 로그\n                        }\n                    }\n                },\n            });\n            \n            console.log(\n                `Transferring: ${content.amount} tokens (${adjustedInputAmount} base units)`\n            ); // 전송 로그\n\n            if (callback) {\n                callback({\n                    text: `Successfully Bridged ${content.amount} ${content.tokenName} to ${content.recipient}, source chain Tx: ${sourceTxHash}, destination chain Tx: ${destinationTxHash}`, // 성공 메시지\n                    content: {\n                        success: true,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                        sourceChain: content.sourceChain,\n                        destinationChain: content.destinationChain,\n                        token: content.tokenName\n                    },\n                });\n            }\n\n            return true; // 성공 반환\n        } catch (error) {\n            console.error(\"Error during token bridge:\", error); // 오류 로그\n            if (callback) {\n                callback({\n                    text: `Error bridging tokens: ${error.message}`, // 오류 메시지\n                    content: { error: error.message },\n                });\n            }\n            return false; // 실패 반환\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{name1}}\",\n                content: {\n                    text: \"Bridge 69 USDC tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0 from arbitrum to base\",\n                },\n            },\n            {\n                user: \"{{name2}}\",\n                content: {\n                    text: \"I'll send 69 USDC tokens now... from: arbitrum, to: base\",\n                    action: \"BRIDGE_DEPOSIT\",\n                },\n            },\n            {\n                user: \"{{name2}}\",\n                content: {\n                    text: \"Successfully bridged 69 USDC tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0, Transaction: 0x39a8c432d9bdad993a33cc1faf2e9b58fb7dd940c0425f1d6db3997e4b4b05c0\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;","import { privateKeyToAccount } from \"viem/accounts\";\n\nimport { createWalletClient, http, WalletClient, type Chain } from \"viem\";\n\nexport function createUserWalletClient(\n    privateKey: `0x${string}`,\n    chain: Chain\n): WalletClient {\n    const account = privateKeyToAccount(privateKey);\n    const walletClient = createWalletClient({\n        account,\n        chain,\n        transport: http(),\n    });\n\n    return walletClient;\n}\n","import { type Chain } from \"viem\";\n\nexport function adjustInputAmountForOuput(\n    inputAmout: bigint,\n    b: bigint\n): bigint {\n    const SCAILING_FACTOR = BigInt(1e18);\n\n    if (b > SCAILING_FACTOR) {\n        throw new Error(\"Fraction b must not exceed 1e18 (100%)\");\n    }\n\n    const adjustedInputAmount =\n        (inputAmout * SCAILING_FACTOR) / (SCAILING_FACTOR - b);\n\n    return adjustedInputAmount;\n}\n\nexport function createTransactionUrl(chain: Chain, transactionHash: string) {\n    if (!chain.blockExplorers) {\n        throw new Error(\"Chain has no block explorers\");\n    }\n\n    let blockExplorerUrl = chain.blockExplorers.default.url;\n\n    if (!blockExplorerUrl.endsWith(\"/\")) {\n        blockExplorerUrl += \"/\";\n    }\n\n    return `${blockExplorerUrl}tx/${transactionHash}`;\n}\n","import { arbitrum, arbitrumSepolia, base, sepolia } from \"viem/chains\";\n\nexport const supportedChains = [\n    {\n        chainName: \"sepolia\",\n        chainId: sepolia.id,\n        viemChain: sepolia,\n        tokenAddress: { weth: \"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14\" },\n    },\n    {\n        chainName: \"arbitrum sepolia\",\n        chainId: arbitrumSepolia.id,\n        viemChain: arbitrumSepolia,\n        tokenAddress: { weth: \"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73\" },\n    },\n];\n","import { Plugin } from \"@elizaos/core\";\nimport deposit from \"./actions/deposit\";\n\nexport const Across: Plugin = {\n    name: \"across\",\n    description: \"Cross chain service provider plugin.\",\n    actions: [\n        deposit\n    ],\n    evaluators: [\n        // evaluator here\n    ],\n    providers: [\n        // providers here\n    ],\n};\n"],"mappings":"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","names":[]}